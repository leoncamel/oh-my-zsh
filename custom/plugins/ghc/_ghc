#compdef ghc ghci

# Ghc ZSH completion function
# Drop this somewhere in your $fpath (like /usr/share/zsh/site-functions)
# and rename it _ghc

_ghc() {

  # _arguments -C \
  #   '(- 1 *)'{-?,--help}'[print a short help statement]' \
  #   '-n[do a dry run]' \
  #   '-v[verbose mode (equivalent to -v3)]:number' \
  #   '-V[display GHC version]' \
  #   ''{--supported-extensions,--supported-languages}'[display the supported languages and language extensions]' \
  #   '--info[display information about the compiler]' \
  #   '--version[display GHC version]' \
  #   '--numeric-version[display GHC version (numeric only)]' \
  #   '--print-libdir[display GHC library directory]' \
  #   '-ferror-spans[output full span in error messages]' \
  #   '-H[Set the minimum heap size to size]:number' \
  #   '-Rghc-timing[Summarise timing stats for GHC (same as +RTS -tstderr)]' \
  # && ret=0

  _arguments -C \
      '-?[help]' \
      '-help[help]' \
      '-v[verbose mode (equivalent to -v3)]' \
      '-vn[set verbosity level]' \
      '-V[display GHC version]' \
      ''{--supported-extensions,--supported-languages}'[display the supported languages and language extensions]' \
      '--info[display information about the compiler]' \
      '--version[display GHC version]' \
      '--numeric-version[display GHC version (numeric only)]' \
      '--print-libdir[display GHC library directory]' \
      '-ferror-spans[output full span in error messages]' \
      '-Hsize[Set the minimum heap size to size]' \
      '-Rghc-timing[Summarise timing stats for GHC (same as +RTS -tstderr)]' \
      '-E[Stop after preprocessing (.hspp file)]' \
      '-C[Stop after generating C (.hc file)]' \
      '-S[Stop after generating assembly (.s file)]' \
      '-c[Do not link]' \
      '-xsuffix[Override default behaviour for source files]' \
      '--interactive[Interactive mode - normally used by just running ghci; see  for details.]' \
      '--make[Build a multi-module Haskell program, automatically figuring out dependencies. Likely to be much easier, and faster, than using make; see  for details..]' \
      '-eexpr[Evaluate expr; see  for details.]' \
      '-M[Generate dependency information suitable for use in a Makefile; see  for details.]' \
      '-hcsufsuffix[set the suffix to use for intermediate C files]' \
      '-hidirdir[set directory for interface files]' \
      '-hisufsuffix[set the suffix to use for interface files]' \
      '-ofilename[set output filename]' \
      '-odirdir[set directory for object files]' \
      '-ohifilename[set the filename in which to put the interface]' \
      '-osufsuffix[set the output file suffix]' \
      '-stubdirdir[redirect FFI stub files]' \
      '-dumpdirdir[redirect dump files]' \
      '-outputdirdir[set output directory]' \
      ''{-keep-hc-file,-keep-hc-files}'[retain intermediate .hc files]' \
      ''{-keep-llvm-file,-keep-llvm-files}'[retain intermediate LLVM .ll files]' \
      ''{-keep-s-file,-keep-s-files}'[retain intermediate .s files]' \
      '-keep-tmp-files[retain all intermediate temporary files]' \
      '-tmpdir[set the directory for temporary files]' \
      '-idir1:dir2:...[add dir, dir2, etc. to import path]' \
      '-i[Empty the import directory list]' \
      '-ddump-hi[Dump the new interface to stdout]' \
      '-ddump-hi-diffs[Show the differences vs. the old interface]' \
      '-ddump-minimal-imports[Dump a minimal set of imports]' \
      '--show-ifacefile[See .]' \
      '-fforce-recomp[Turn off recompilation checking; implied by any -ddump-X option]' \
      '-ignore-dot-ghci[Disable reading of .ghci files]' \
      '-ghci-script[Load the given additional .ghci file]' \
      '-read-dot-ghci[Enable reading of .ghci files]' \
      '-fbreak-on-exception[Break on any exception thrown]' \
      '-fbreak-on-error[Break on uncaught exceptions and errors]' \
      '-fprint-evld-with-show[Enable usage of Show instances in :print]' \
      '-fprint-bind-result[Turn on printing of binding results in GHCi]' \
      '-fno-print-bind-contents[Turn off printing of binding contents in GHCi]' \
      '-fno-implicit-import-qualified[Turn off implicit qualified import of everything in GHCi]' \
      '-package-nameP[Compile to be part of package P]' \
      '-packageP[Expose package P]' \
      '-hide-all-packages[Hide all packages by default]' \
      '-hide-packagename[Hide package P]' \
      '-ignore-packagename[Ignore package P]' \
      '-package-conffile[Load more packages from file]' \
      '-no-user-package-conf[Don'\''t load the user'\''s package config file.]' \
      '-no-auto-link-packages[Don'\''t automatically link in the haskell98 package.]' \
      '-trustP[Expose package P and set it to be trusted]' \
      '-distrustP[Expose package P and set it to be distrusted]' \
      '-distrust-all[Distrust all packages by default]' \
      '-fglasgow-exts[Enable most language extensions; see  for exactly which ones.]' \
      '-XOverlappingInstances[Enable overlapping instances]' \
      '-XIncoherentInstances[Enable incoherent instances. Implies -XOverlappingInstances]' \
      '-XUndecidableInstances[Enable undecidable instances]' \
      '-fcontext-stack=Nn[set the limit for context reduction. Default is 20.]' \
      '-XArrows[Enable arrow notation extension]' \
      '-XDisambiguateRecordFields[Enable record field disambiguation]' \
      '-XForeignFunctionInterface[Enable foreign function interface (implied by -fglasgow-exts)]' \
      '-XGenerics[Deprecated, does nothing. No longer enables generic classes. See also GHC'\''s support for generic programming.]' \
      '-XImplicitParams[Enable Implicit Parameters. Implied by -fglasgow-exts.]' \
      '-firrefutable-tuples[Make tuple pattern matching irrefutable]' \
      '-XNoImplicitPrelude[Don'\''t implicitly import Prelude]' \
      '-XRebindableSyntax[Employ rebindable syntax]' \
      '-XNoMonomorphismRestriction[Disable the monomorphism restriction]' \
      '-XNoNPlusKPatterns[Disable support for n+k patterns]' \
      '-XNoTraditionalRecordSyntax[Disable support for traditional record syntax (as supported by Haskell 98) C {f = x}]' \
      '-XNoMonoPatBinds[Make pattern bindings polymorphic]' \
      '-XRelaxedPolyRec[Relaxed checking for mutually-recursive polymorphic functions]' \
      '-XExtendedDefaultRules[Use GHCi'\''s extended default rules in a normal module]' \
      '-XOverloadedStrings[Enable overloaded string literals. ]' \
      '-XGADTs[Enable generalised algebraic data types. ]' \
      '-XGADTSyntax[Enable generalised algebraic data type syntax. ]' \
      '-XTypeFamilies[Enable type families.]' \
      '-XConstraintKinds[Enable a kind of constraints.]' \
      '-XDataKinds[Enable datatype promotion.]' \
      '-XPolyKinds[Enable kind polymorphism.]' \
      '-XScopedTypeVariables[Enable lexically-scoped type variables. Implied by -fglasgow-exts.]' \
      '-XMonoLocalBinds[Enable do not generalise local bindings. ]' \
      '-XTemplateHaskell[Enable Template Haskell. No longer implied by -fglasgow-exts.]' \
      '-XQuasiQuotes[Enable quasiquotation.]' \
      '-XBangPatterns[Enable bang patterns.]' \
      '-XCPP[Enable the C preprocessor.]' \
      '-XPatternGuards[Enable pattern guards.]' \
      '-XViewPatterns[Enable view patterns.]' \
      '-XUnicodeSyntax[Enable unicode syntax.]' \
      '-XMagicHash[Allow "#" as a postfix modifier on identifiers.]' \
      '-XExplicitForAll[Enable explicit universal quantification. Implied by -XScopedTypeVariables, -XLiberalTypeSynonyms, -XRank2Types, -XRankNTypes, -XPolymorphicComponents, -XExistentialQuantification ]' \
      '-XPolymorphicComponents[Enable polymorphic components for data constructors.]' \
      '-XRank2Types[Enable rank-2 types.]' \
      '-XRankNTypes[Enable rank-N types.]' \
      '-XImpredicativeTypes[Enable impredicative types.]' \
      '-XExistentialQuantification[Enable existential quantification.]' \
      '-XKindSignatures[Enable kind signatures.]' \
      '-XEmptyDataDecls[Enable empty data declarations.]' \
      '-XParallelListComp[Enable parallel list comprehensions.]' \
      '-XTransformListComp[Enable generalised list comprehensions.]' \
      '-XMonadComprehensions[Enable monad comprehensions.]' \
      '-XUnliftedFFITypes[Enable unlifted FFI types.]' \
      '-XInterruptibleFFI[Enable interruptible FFI.]' \
      '-XLiberalTypeSynonyms[Enable liberalised type synonyms.]' \
      '-XTypeOperators[Enable type operators.]' \
      '-XDoRec[Enable recursive do notation.]' \
      '-XRecursiveDo[Enable recursive do (mdo) notation. This is deprecated; please use recursive do notation instead.]' \
      '-XParallelArrays[Enable parallel arrays.]' \
      '-XRecordWildCards[Enable record wildcards.]' \
      '-XNamedFieldPuns[Enable record puns.]' \
      '-XDisambiguateRecordFields[Enable  record field disambiguation.]' \
      '-XUnboxedTuples[Enable unboxed tuples.]' \
      '-XStandaloneDeriving[Enable standalone deriving.]' \
      '-XDeriveDataTypeable[Enable deriving for the Data and Typeable classes.]' \
      '-XDeriveGeneric[Enable deriving for the Generic class.]' \
      '-XGeneralizedNewtypeDeriving[Enable newtype deriving.]' \
      '-XTypeSynonymInstances[Enable type synonyms in instance heads.]' \
      '-XFlexibleContexts[Enable flexible contexts.]' \
      '-XFlexibleInstances[Enable flexible instances. Implies -XTypeSynonymInstances]' \
      '-XConstrainedClassMethods[Enable constrained class methods.]' \
      '-XDefaultSignatures[Enable default signatures.]' \
      '-XMultiParamTypeClasses[Enable multi parameter type classes.]' \
      '-XFunctionalDependencies[Enable functional dependencies.]' \
      '-XPackageImports[Enable package-qualified imports.]' \
      '-XSafe[Enable the Safe Haskell Safe mode.]' \
      '-XTrustworthy[Enable the Safe Haskell Trustworthy mode.]' \
      '-XUnsafe[Enable Safe Haskell Unsafe mode.]' \
      '-fpackage-trust[Enable Safe Haskell trusted package requirement for trustworty modules.]' \
      '-W[enable normal warnings]' \
      '-w[disable all warnings]' \
      '-Wall[enable almost all warnings (details in )]' \
      '-Werror[make warnings fatal]' \
      '-Wwarn[make warnings non-fatal]' \
      '-fdefer-type-errors[Defer as many type errors as possible until runtime.]' \
      '-fhelpful-errors[Make suggestions for mis-spelled names.]' \
      '-fwarn-deprecated-flags[warn about uses of commandline flags that are deprecated]' \
      '-fwarn-duplicate-exports[warn when an entity is exported multiple times]' \
      '-fwarn-hi-shadowing[warn when a .hi file in the current directory shadows a library]' \
      '-fwarn-identities[warn about uses of Prelude numeric conversions that are probably the identity (and hence could be omitted)]' \
      '-fwarn-implicit-prelude[warn when the Prelude is implicitly imported]' \
      '-fwarn-incomplete-patterns[warn when a pattern match could fail]' \
      '-fwarn-incomplete-uni-patterns[warn when a pattern match in a lambda expression or pattern binding could fail]' \
      '-fwarn-incomplete-record-updates[warn when a record update could fail]' \
      '-fwarn-lazy-unlifted-bindings[warn when a pattern binding looks lazy but must be strict]' \
      '-fwarn-missing-fields[warn when fields of a record are uninitialised]' \
      '-fwarn-missing-import-lists[warn when an import declaration does not explicitly list all the names brought into scope]' \
      '-fwarn-missing-methods[warn when class methods are undefined]' \
      '-fwarn-missing-signatures[warn about top-level functions without signatures]' \
      '-fwarn-missing-local-sigs[warn about polymorphic local bindings without signatures]' \
      '-fwarn-monomorphism-restriction[warn when the Monomorphism Restriction is applied]' \
      '-fwarn-name-shadowing[warn when names are shadowed]' \
      ''{-fwarn-orphans,-fwarn-auto-orphans}'[warn when the module contains orphan instance declarations or rewrite rules]' \
      '-fwarn-overlapping-patterns[warn about overlapping patterns]' \
      '-fwarn-tabs[warn if there are tabs in the source file]' \
      '-fwarn-type-defaults[warn when defaulting happens]' \
      '-fwarn-unrecognised-pragmas[warn about uses of pragmas that GHC doesn'\''t recognise]' \
      '-fwarn-unused-binds[warn about bindings that are unused]' \
      '-fwarn-unused-imports[warn about unnecessary imports]' \
      '-fwarn-unused-matches[warn about variables in patterns that aren'\''t used]' \
      '-fwarn-unused-do-bind[warn about do bindings that appear to throw away values of types other than ()]' \
      '-fwarn-wrong-do-bind[warn about do bindings that appear to throw away monadic values that you should have bound instead]' \
      '-fwarn-unsafe[warn if the module being compiled is regarded to be unsafe. Should be used to check the safety status of modules when using safe inference.]' \
      '-fwarn-safe[warn if the module being compiled is regarded to be safe. Should be used to check the safety status of modules when using safe inference.]' \
      '-fwarn-warnings-deprecations[warn about uses of functions & types that have warnings or deprecated pragmas]' \
      '-O[Enable default optimisation (level 1)]' \
      '-On[Set optimisation level n]' \
      '-fcase-merge[Enable case-merging. Implied by -O.]' \
      '-fcse[Turn on common sub-expression elimination. Implied by -O.]' \
      '-fdicts-strict[Make dictionaries strict]' \
      '-fdo-eta-reduction[Enable eta-reduction. Implied by -O.]' \
      '-fdo-lambda-eta-expansion[Enable lambda eta-reduction]' \
      '-feager-blackholing[Turn on eager blackholing]' \
      '-fenable-rewrite-rules[Switch on all rewrite rules (including rules generated by automatic specialisation of overloaded functions). Implied by -O.]' \
      '-fexcess-precision[Enable excess intermediate precision]' \
      '-ffloat-in[Turn on the float-in transformation. Implied by -O.]' \
      '-ffull-laziness[Turn on full laziness (floating bindings outwards). Implied by -O.]' \
      '-fignore-asserts[Ignore assertions in the source]' \
      '-fignore-interface-pragmas[Ignore pragmas in interface files]' \
      '-fliberate-case[Turn on the liberate-case transformation. Implied by -O2.]' \
      '-fliberate-case-threshold=n[Set the size threshold for the liberate-case transformation to n (default: 200)]' \
      '-fllvm-tbaa[Turn on Typed Based Alias Analysis information in the LLVM backend. This enables more accurate and alias information in the LLVM backend for better optimisation. (default: enabled)]' \
      '-fmax-simplifier-iterations[Set the max iterations for the simplifier]' \
      '-fmax-worker-args[If a worker has that many arguments, none will be unpacked anymore (default: 10)]' \
      '-fno-opt-coercion[Turn off the coercion optimiser]' \
      '-fno-pre-inlining[Turn off pre-inlining]' \
      '-fno-state-hack[Turn off the "state hack" whereby any lambda with a real-world state token as argument is considered to be single-entry.  Hence OK to inline things inside it.]' \
      '-fpedantic-bottoms[Make GHC be more precise about its treatment of bottom (but see also -fno-state-hack). In particular, GHC will not eta-expand through a case expression.]' \
      '-fomit-interface-pragmas[Don'\''t generate interface pragmas]' \
      '-freg-liveness[Track STG register liveness to avoid saving and restoring dead registers, as well as freeing the dead ones for use in intermediate code. (LLVM backend only, default: enabled).  Traditionally GHC has reserved a set of machine registers for the exclusive use of storing a stack pointer, heap pointer and general purpose function argument registers (these are the so called STG registers). This optimisation tracks the liveness of the machine registers the STG registers are mapped to so that the machine register can be used for other purposes when the STG register are dead.]' \
      '-fsimplifier-phases[Set the number of phases for the simplifier (default 2). Ignored with -O0.]' \
      '-fsimpl-tick-factor=n[Set the percentage factor for simplifier ticks (default 100)]' \
      '-fspec-constr[Turn on the SpecConstr transformation. Implied by -O2.]' \
      '-fspec-constr-threshold=n[Set the size threshold for the SpecConstr transformation to n (default: 200)]' \
      '-fspec-constr-count=n[Set to n (default: 3) the maximum number of specialisations that will be created for any one function by the SpecConstr transformation]' \
      '-fspecialise[Turn on specialisation of overloaded functions. Implied by -O.]' \
      '-fstrictness[Turn on strictness analysis. Implied by -O.]' \
      '-fstrictness=before=n[Run an additional strictness analysis before simplifier phase n]' \
      '-fstatic-argument-transformation[Turn on the static argument transformation. Implied by -O2.]' \
      '-funbox-strict-fields[Flatten strict constructor fields]' \
      '-funfolding-creation-threshold[Tweak unfolding settings]' \
      '-funfolding-fun-discount[Tweak unfolding settings]' \
      '-funfolding-keeness-factor[Tweak unfolding settings]' \
      '-funfolding-use-threshold[Tweak unfolding settings]' \
      '-prof[Turn on profiling]' \
      '-fprof-auto[Auto-add SCCs to all bindings not marked INLINE]' \
      '-fprof-auto-top[Auto-add SCCs to all top-level bindings not marked INLINE]' \
      '-fprof-auto-exported[Auto-add SCCs to all exported bindings not marked INLINE]' \
      '-fprof-cafs[Auto-add SCCs to all CAFs]' \
      '-fno-prof-count-entries[Do not collect entry counts]' \
      '-ticky[Turn on ticky-ticky profiling]' \
      '-fhpc[Turn on Haskell program coverage instrumentation]' \
      '-hpcdirdir[Directory to deposit .mix files during compilation (default is .hpc)]' \
      '-F[ Enable the use of a pre-processor (set with -pgmF) ]' \
      '-cpp[Run the C pre-processor on Haskell source files]' \
      '-Dsymbol=value[Define a symbol in the C pre-processor]' \
      '-Usymbol[Undefine a symbol in the C pre-processor]' \
      '-Idir[Add dir to the directory search list for #include files]' \
      '-fasm[Use the native code generator]' \
      '-fllvm[Compile using the LLVM code generator]' \
      '-fno-code[Omit code generation]' \
      '-fbyte-code[Generate byte-code]' \
      '-fobject-code[Generate object code]' \
      '-shared[Generate a shared library (as opposed to an executable)]' \
      '-fPIC[Generate position-independent code (where available)]' \
      '-dynamic[Use dynamic Haskell libraries (if available)]' \
      '-dynload[Selects one of a number of modes for finding shared libraries at runtime.]' \
      '-frameworkname[On Darwin/MacOS X only, link in the framework name. This option corresponds to the -framework option for Apple'\''s Linker.]' \
      '-framework-pathname[On Darwin/MacOS X only, add dir to the list of directories searched for frameworks. This option corresponds to the -F option for Apple'\''s Linker.]' \
      '-llib[Link in library lib]' \
      '-Ldir[Add dir to the list of directories searched for libraries]' \
      '-main-is[Set main module and function]' \
      '--mk-dll[DLL-creation mode (Windows only)]' \
      '-no-hs-main[Don'\''t assume this program contains main]' \
      ''{-rtsopts,-rtsopts={none,some,all}}'[Control whether the RTS behaviour can be tweaked via command-line flags and the GHCRTS environment variable. Using none means no RTS flags can be given; some means only a minimum of safe options can be given (the default), and all (or no argument at all) means that all RTS flags are permitted.]' \
      '-with-rtsopts=opts[Set the default RTS options to opts.]' \
      '-no-link[Omit linking]' \
      '-split-objs[Split objects (for libraries)]' \
      '-static[Use static Haskell libraries]' \
      '-threaded[Use the threaded runtime]' \
      '-debug[Use the debugging runtime]' \
      '-eventlog[Enable runtime event tracing]' \
      '-fno-gen-manifest[Do not generate a manifest file (Windows only)]' \
      '-fno-embed-manifest[Do not embed the manifest in the executable (Windows only)]' \
      '-fno-shared-implib[Don'\''t generate an import library for a DLL (Windows only)]' \
      '-dylib-install-namepath[Set the install name (via -install_name passed to Apple'\''s linker), specifying the full install path of the library file. Any libraries or executables that link with it later will pick up that path as their runtime search location for it. (Darwin/MacOS X only)]' \
      '-fplugin=module[Load a plugin exported by a given module]' \
      '-fplugin-opt=module:args[Give arguments to a plugin module; module must be specified with -fplugin]' \
      '-pgmLcmd[Use cmd as the literate pre-processor]' \
      '-pgmPcmd[Use cmd as the C pre-processor (with -cpp only)]' \
      '-pgmccmd[Use cmd as the C compiler]' \
      '-pgmlocmd[Use cmd as the LLVM optimiser]' \
      '-pgmlccmd[Use cmd as the LLVM compiler]' \
      '-pgmscmd[Use cmd as the splitter]' \
      '-pgmacmd[Use cmd as the assembler]' \
      '-pgmlcmd[Use cmd as the linker]' \
      '-pgmdllcmd[Use cmd as the DLL generator]' \
      '-pgmFcmd[Use cmd as the pre-processor (with -F only)]' \
      '-pgmwindrescmd[Use cmd as the program for embedding manifests on Windows.]' \
      '-optLoption[pass option to the literate pre-processor]' \
      '-optPoption[pass option to cpp (with -cpp only)]' \
      '-optFoption[pass option to the custom pre-processor]' \
      '-optcoption[pass option to the C compiler]' \
      '-optlooption[pass option to the LLVM optimiser]' \
      '-optlcoption[pass option to the LLVM compiler]' \
      '-optmoption[pass option to the mangler]' \
      '-optaoption[pass option to the assembler]' \
      '-optloption[pass option to the linker]' \
      '-optdlloption[pass option to the DLL generator]' \
      '-optwindresoption[pass option to windres.]' \
      '-msse2[(x86 only) Use SSE2 for floating point]' \
      '-fext-core[Generate .hcr external Core files]' \
      '-dcore-lint[Turn on internal sanity checking]' \
      '-ddump-to-file[Dump to files instead of stdout]' \
      '-ddump-asm[Dump assembly]' \
      '-ddump-bcos[Dump interpreter byte code]' \
      '-ddump-cmm[Dump C-- output]' \
      '-ddump-core-stats[Print a one-line summary of the size of the Core program at the end of the optimisation pipeline]' \
      '-ddump-cpranal[Dump output from CPR analysis]' \
      '-ddump-cse[Dump CSE output]' \
      '-ddump-deriv[Dump deriving output]' \
      '-ddump-ds[Dump desugarer output]' \
      '-ddump-flatC[Dump “flat” C]' \
      '-ddump-foreign[Dump foreign export stubs]' \
      '-ddump-hpc[Dump after instrumentation for program coverage]' \
      '-ddump-inlinings[Dump inlining info]' \
      '-ddump-llvm[Dump LLVM intermediate code]' \
      '-ddump-occur-anal[Dump occurrence analysis output]' \
      '-ddump-opt-cmm[Dump the results of C-- to C-- optimising passes]' \
      '-ddump-parsed[Dump parse tree]' \
      '-ddump-prep[Dump prepared core]' \
      '-ddump-rn[Dump renamer output]' \
      '-ddump-rule-firings[Dump rule firing info]' \
      '-ddump-rule-rewrites[Dump detailed rule firing info]' \
      '-ddump-rules[Dump rules]' \
      '-ddump-vect[Dump vectoriser input and output]' \
      '-ddump-simpl[Dump final simplifier output]' \
      '-ddump-simpl-phases[Dump output from each simplifier phase]' \
      '-ddump-simpl-iterations[Dump output from each simplifier iteration]' \
      '-ddump-spec[Dump specialiser output]' \
      '-ddump-splices[Dump TH spliced expressions, and what they evaluate to]' \
      '-ddump-stg[Dump final STG]' \
      '-ddump-stranal[Dump strictness analyser output]' \
      '-ddump-tc[Dump typechecker output]' \
      '-ddump-types[Dump type signatures]' \
      '-ddump-worker-wrapper[Dump worker-wrapper output]' \
      '-ddump-if-trace[Trace interface files]' \
      '-ddump-tc-trace[Trace typechecker]' \
      '-ddump-vt-trace[Trace vectoriser]' \
      '-ddump-rn-trace[Trace renamer]' \
      '-ddump-rn-stats[Renamer stats]' \
      '-ddump-simpl-stats[Dump simplifier stats]' \
      '-dno-debug-output[Suppress unsolicited debugging output]' \
      '-dppr-debug[Turn on debug printing (more verbose)]' \
      '-dppr-noprags[Don'\''t output pragma info in dumps]' \
      '-dppr-user-length[Set the depth for printing expressions in error msgs]' \
      '-dppr-colsNNN[Set the width of debugging output. For example -dppr-cols200]' \
      '-dppr-case-as-let[Print single alternative case expressions as strict lets.]' \
      '-dsuppress-all[In core dumps, suppress everything that is suppressable.]' \
      '-dsuppress-uniques[Suppress the printing of uniques in debug output (easier to use diff)]' \
      '-dsuppress-idinfo[Suppress extended information about identifiers where they are bound]' \
      '-dsuppress-module-prefixes[Suppress the printing of module qualification prefixes]' \
      '-dsuppress-type-signatures[Suppress type signatures]' \
      '-dsuppress-type-applications[Suppress type applications]' \
      '-dsuppress-coercions[Suppress the printing of coercions in Core dumps to make them shorter]' \
      '-dsource-stats[Dump haskell source stats]' \
      '-dcmm-lint[C-- pass sanity checking]' \
      '-dstg-lint[STG pass sanity checking]' \
      '-dstg-stats[Dump STG stats]' \
      '-dverbose-core2core[Show output from each core-to-core pass]' \
      '-dverbose-stg2stg[Show output from each STG-to-STG pass]' \
      '-dshow-passes[Print out each pass name as it happens]' \
      '-dfaststring-stats[Show statistics for fast string usage when finished]' \
      '-fno-hi-version-check[Don'\''t complain about .hi file mismatches]' \
      '-dno-black-holing[Turn off black holing (probably doesn'\''t work)]' \
      '-fhistory-size[Set simplification history size]' \
      '-funregisterised[Unregisterised compilation (use -unreg instead)]' \
      '-fno-ghci-history[Do not use the load/store the GHCi command history from/to ghci_history.]' \
      '-fno-ghci-sandbox[Turn off the GHCi sandbox. Means computations are run in the main thread, rather than a forked thread.]' \
   && ret=0

  return ret
}

_ghc "$@"

# ------------------------------------------------------------------------------
# -*- mode: zsh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim: ft=zsh sw=2 ts=2 et
# ------------------------------------------------------------------------------
